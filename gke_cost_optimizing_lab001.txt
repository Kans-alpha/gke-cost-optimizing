    1  gcloud auth list
    2  gcloud config list project
    3  git init
    4  gsutil -m cp -r gs://spls/gsp766/gke-qwiklab ~
    5  ls -l
    6  cd gke-qwiklab/
    7  ls -l
    8  gcloud config set compute/zone us-central1-a && gcloud container clusters get-credentials multi-tenant-cluster
    9  kubectl get namespace
   10  kubectl api-resources --namespaced=true
   11  kubectl get services --namespace=kube-system
   12  kubectl create namespace team-a && kubectl create namespace team-b
   13  kubectl run app-server --image=centos --namespace=team-a -- sleep infinity && kubectl run app-server --image=centos --namespace=team-b -- sleep infinity
   14  kubectl get pods -A
   15  kubectl describe pod app-server --namespace=team-a
   16  kubectl config set-context --current --namespace=team-a
   17  kubectl describe pod app-server
   18  gcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} --member=serviceAccount:team-a-dev@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com  --role=roles/container.clusterViewer
   19  kubectl create role pod-reader --resource=pods --verb=watch --verb=get --verb=list
   20  cat developer-role.yaml
   21  kubectl create -f developer-role.yaml
   22  kubectl create rolebinding team-a-developers --role=developer --user=team-a-dev@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com
   23  gcloud iam service-accounts keys create /tmp/key.json --iam-account team-a-dev@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com
   24  gcloud auth activate-service-account  --key-file=/tmp/key.json
   25  gcloud container clusters get-credentials multi-tenant-cluster --zone us-central1-a --project ${GOOGLE_CLOUD_PROJECT}
   26  kubectl get pods --namespace=team-a
   27  kubectl get pods --namespace=team-b
   28  gcloud container clusters get-credentials multi-tenant-cluster --zone us-central1-a --project ${GOOGLE_CLOUD_PROJECT}
   29  kubectl create quota test-quota --hard=count/pods=2,count/services.loadbalancers=1 --namespace=team-a
   30  kubectl create quota test-quota --hard=count/pods=2,count/services.loadbalancers=1 --namespace=team-a
   31  kubectl run app-server-2 --image=centos --namespace=team-a -- sleep infinity
   32  kubectl run app-server-3 --image=centos --namespace=team-a -- sleep infinity
   33  kubectl describe quota test-quota --namespace=team-a
   34  export KUBE_EDITOR="nano"
   35  kubectl edit quota test-quota --namespace=team-a
   36  kubectl describe quota test-quota --namespace=team-a
   37  ls -l
   38  cat cpu-mem-quota.yaml 
   39  kubectl create -f cpu-mem-quota.yaml 
   40  cat cpu-mem-demo-pod.yaml 
   41  kubectl create -f cpu-mem-demo-pod.yaml --namespace=team-a
   42  kubectl describe quota cpu-mem-quota --namespace=team-a
   43  cd ..
   44  git init
   45  git add README.md
   46  ls
   47  git add README-cloudshell.txt 
   48  git commit -m "my first independent commit"
   49  git clone https://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@git@github.com:Kans-alpha/gke-cost-optimizing.git
   50  git clone https://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@Kans-alpha@github.com:Kans-alpha/gke-cost-optimizing.git
   51  git clone https://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@kans.alpha@gmail.com@github.com:Kans-alpha/gke-cost-optimizing.git
   52  gcloud container clusters update multi-tenant-cluster --zone us-central1-a --resource-usage-bigquery-dataset cluster_dataset
   53  git config -l
   54  git clone https://github.com/Kans-alpha/gke-cost-optimizing.git
   55  git config --global credential.helper cache
   56  git config --global credential.helper 'cache --timeout=3600'
   57  git config --get credential.helper
   58  export GCP_BILLING_EXPORT_TABLE_FULL_PATH=${GOOGLE_CLOUD_PROJECT}.billing_dataset.gcp_billing_export_v1_xxxx
   59  export USAGE_METERING_DATASET_ID=cluster_dataset
   60  export COST_BREAKDOWN_TABLE_ID=usage_metering_cost_breakdown
   61  export USAGE_METERING_QUERY_TEMPLATE=~/gke-qwiklab/usage_metering_query_template.sql
   62  export USAGE_METERING_QUERY=cost_breakdown_query.sql
   63  export USAGE_METERING_START_DATE=2020-10-26
   64  sed -e "s/\${fullGCPBillingExportTableID}/$GCP_BILLING_EXPORT_TABLE_FULL_PATH/" -e "s/\${projectID}/$GOOGLE_CLOUD_PROJECT/" -e "s/\${datasetID}/$USAGE_METERING_DATASET_ID/" -e "s/\${startDate}/$USAGE_METERING_START_DATE/" "$USAGE_METERING_QUERY_TEMPLATE" > "$USAGE_METERING_QUERY"
   65  bq query --project_id=$GOOGLE_CLOUD_PROJECT --use_legacy_sql=false --destination_table=$USAGE_METERING_DATASET_ID.$COST_BREAKDOWN_TABLE_ID --schedule='every 24 hours' --display_name="GKE Usage Metering Cost Breakdown Scheduled Query" --replace=true "$(cat $USAGE_METERING_QUERY)"
   66  ls -l
   67  cd gke-cost-optimizing/
   68  ls
   69  pwd
   70  history --> gke_cost_optimizing_lab001.txt
